name: build engine

on:
  workflow_call:
    inputs:
      device:
        required: true
        type: string
      ksu_type:
        required: true
        type: string
      susfs:
        required: true
        type: boolean
      pixel-source-branch:
        required: true
        type: string
      aosp-spoofing:
        required: false
        type: string
      hooks_type:
        required: true
        type: string
      next_debug:
        required: false
        type: boolean
        default: false
      
permissions:
  contents: write
  actions: write 

jobs:
  build-pixel-kernel:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      KERNEL_VER: ''
      KSUVER: ''
      SUSFS_STAT: ''
      ZIP_NAME: ''
      BOOT_NAME: ''
      VENDOR_NAME: ''
      MAGISKBOOT: '${{ github.workspace }}/Prebuilds/magiskboot'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Make magiskboot executable
        run: chmod +x ${{ env.MAGISKBOOT }}

      - name: Debug print inputs
        run: |
          echo "ksu_type='${{ inputs.ksu_type }}'"
          echo "susfs='${{ inputs.susfs }}'"
          echo "hooks_type='${{ inputs.hooks_type }}'"
          echo "next_debug='${{ inputs.next_debug }}'"
          if [ "${{ inputs.next_debug }}" = "true" ]; then
            echo "Next debug mode ENABLED"
          else
            echo "Next debug mode DISABLED"
          fi

      - name: Install Build Dependencies
        run: sudo apt-get update && sudo apt-get install -y wget unzip jq libelf-dev libssl-dev build-essential lz4

      - name: Install Repo
        run: |
          mkdir -p .bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > .bin/repo
          chmod a+rx .bin/repo
          echo "$GITHUB_WORKSPACE/.bin" >> $GITHUB_PATH

      - name: Clone AnyKernel3, KernelPatches and SUSFS
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          # Клонирую репозиторий с патчами, susfs и AK3. 
          git clone https://github.com/etherealNest/AnyKernel3 -b "${{ inputs.device }}"
          git clone https://github.com/etherealNest/kernel_patches.git

          if [ "${{ inputs.susfs }}" = "true" ]; then
            git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "gki-android14-6.1"
          fi

          if [ "${{ inputs.ksu_type }}" == "suki-su" ]; then
            git clone https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch.git
          fi

      - name: Copy prebuild img files
        run: |
          set -e
          MKBOOTIMG_DIR="FilesForImg"
          mkdir -p "${MKBOOTIMG_DIR}/assets"
          unzip "${GITHUB_WORKSPACE}/Prebuilds/stock_${{ inputs.device }}_img.zip" -d "FilesForImg/assets"

      - name: Initialize and Sync Kernel Source
        run: |
          KERNEL_DIR="kernel_source"
          MANIFEST_URL="https://android.googlesource.com/kernel/manifest"

          rm -rf "$KERNEL_DIR"
          mkdir -p "$KERNEL_DIR"
          cd "$KERNEL_DIR"

          repo init --depth=1 -u "$MANIFEST_URL" -b "${{ inputs.pixel-source-branch }}"

          if [ -n "${{ inputs.aosp-spoofing }}" ]; then
            echo "Overriding kernel/common revision to tag ${{ inputs.aosp-spoofing }}"
            sed -i "s|path=\"aosp\" name=\"kernel/common\"|path=\"aosp\" name=\"kernel/common\" revision=\"refs/tags/${{ inputs.aosp-spoofing }}\"|g" .repo/manifests/default.xml
          else
            echo "No AOSP spoofing input provided, using default manifest settings."
          fi

          echo "Syncing repositories..."
          repo sync -c -j$(nproc --all) --fail-fast --no-tags

      - name: Check Disk Space Before Sync
        run: |
          echo "Disk space before kernel source sync:"
          df -h

      - name: Verify Kernel Version
        run: |
          cd kernel_source/aosp
          KERNEL_VER=$(sed -n '2,4p' Makefile | grep -oE '[0-9]+' | paste -sd '.')
          echo "KERNEL_VER=$KERNEL_VER" >> $GITHUB_ENV

          echo "Kernel version detected: ${KERNEL_VER}"

      - name: Apply Build System Patch
        run: |
          # Патчитм BUILD.bazel чтобы явно заставить систему сборки использовать наши исходники.
          # Под каждое устройство нужно делать свой патч.

          echo "Applying build system patch..."
          PATCH_FILE=".github/workflows/Patches/fix_${{ inputs.device }}_BUILD.bazel.patch"
          TARGET_DIR="kernel_source/private/devices/google/${{ inputs.device }}"

          patch -p1 --forward -d "$TARGET_DIR" < "$PATCH_FILE"

          echo "Build system patch applied successfully."

      - name: Disable ABI Protected
        run: |
          # Очень важно, если не отключить на этом этапе ABI в дальнейшей сборке перестанут работать некоторые драйвера.
          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' ./kernel_source/aosp/BUILD.bazel
          rm -rf ./kernel_source/aosp/android/abi_gki_protected_exports_*

      - name: Add KernelSU
        working-directory: kernel_source/aosp
        run: |
          set -ex
          if [ "${{ inputs.ksu_type}}" == "ksu-next" ]; then
            echo "Adding KernelSU Next"
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next
          elif [ "${{ inputs.ksu_type}}" == "ksu" ]; then
            echo "Adding KernelSU"
            curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
          elif [ "${{ inputs.ksu_type}}" == "suki-su" ]; then
            echo "Adding SukiSU-Ultra"
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          fi

      - name: Apply SUSFS Patches
        if: ${{ inputs.susfs }}
        working-directory: kernel_source/aosp
        run: |          
          echo "Applying SUSFS patches..."
          
          cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch ./
          patch -p1 --forward < 50_add_susfs_in_gki-android14-6.1.patch
          cp ../../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
          
          if [ "${{ inputs.ksu_type }}" != 'suki-su' ]; then
            echo "Applying SUSFS patches for KernelSU Next..."
            # Тут будет интегрировать сам susfs с KernelSU Next

            if [ "${{ inputs.ksu_type }}" == "ksu-next" ]; then
              cd ./KernelSU-Next
            elif [ "${{ inputs.ksu_type }}" == "ksu" ]; then
              cd ./KernelSU
            fi

            # Для начала применяю самый основной патч, он ожидаемо должен завершиться с ошибкой.
            echo "Apply main patch"
            cp ../../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true
          fi

          if [ "${{ inputs.ksu_type }}" == "ksu-next" ] && [ "${{ inputs.next_debug }}" == "false" ]; then
            # Применяю несколько мелких патчей к файлам к которым не мог применить основной патч.
            echo "STARTED fix for apk_sign.c"
            cp ../../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_apk_sign.c.patch ./
            patch -p1 --forward < fix_apk_sign.c.patch

            echo "STARTED fix for core_hook.c"
            cp ../../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_core_hook.c.patch ./
            patch -p1 --forward < fix_core_hook.c.patch

            echo "STARTED fix for sucompat.c"
            cp ../../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_sucompat.c.patch ./
            patch -p1 --forward < fix_sucompat.c.patch

            echo "STARTED fix for fix_kernel_compat.c.patch"
            cp ../../../kernel_patches/next/susfs_fix_patches/v1.5.9/fix_kernel_compat.c.patch ./
            patch -p1 --forward < fix_kernel_compat.c.patch
          fi

      - name: Get KernelSU Version
        working-directory: kernel_source/aosp
        run: |          
          if [ "${{ inputs.ksu_type}}" == "ksu-next" ]; then
            cd ./KernelSU-Next
          elif [ "${{ inputs.ksu_type }}" == "ksu" ]; then
            cd ./KernelSU
          elif [ "${{ inputs.ksu_type }}" == "suki-su" ]; then
            cd ./KernelSU
          fi

          # KernelSU Next определяет свою версию по количеству коммитов.

          # Базовая версия для подсчета
          if [[ "${{ inputs.ksu_type }}" == "ksu-next" || "${{ inputs.ksu_type }}" == "ksu" ]]; then
            BASE_VERSION=10200
          elif [ "${{ inputs.ksu_type }}" == "suki-su" ]; then
            BASE_VERSION=10700
          fi

          # Считаем коммиты в текущей директории и добавляем к базовой версии
          git fetch origin

          KSUVER=$(expr $(git rev-list --count origin/main) + $BASE_VERSION)
          
          echo "Detected KSUVER: $KSUVER"
          echo "KSUVER=$KSUVER" >> $GITHUB_ENV
          
      - name: Force KernelSU Driver Version
        if: ${{ inputs.ksu_type != 'suki-su' }}
        working-directory: kernel_source/aosp
        run: |
          echo "Forcing KSU Driver Version to ${KSUVER} in Makefile..."

          if [ "${{ inputs.ksu_type }}" == "ksu-next" ]; then
            cd ./KernelSU-Next/kernel
            STATIC_VERSION=11998
          elif [ "${{ inputs.ksu_type }}" == "ksu" ]; then
            cd ./KernelSU/kernel
            STATIC_VERSION=16
          elif [ "${{ inputs.ksu_type }}" == "suki-su" ]; then
            cd ./KernelSU/kernel
            STATIC_VERSION=13000
          fi

          # Нужно вручную подменить номер версии, это лишь визуальная часть.
          # Во время сборки bazel он выполняет всё в песочнице и Makefile попросту не видит папки .git для подсчёта версии.

          if [ "${{ inputs.ksu_type }}" == "ksu-next" ] || [ "${{ inputs.ksu_type }}" == "ksu" ]; then
            sed -i "s/ccflags-y += -DKSU_VERSION=${STATIC_VERSION}/ccflags-y += -DKSU_VERSION=${KSUVER}/" Makefile
          elif [ "${{ inputs.ksu_type }}" == "suki-su" ]; then
            sed -i "57s/${STATIC_VERSION}/${KSUVER}/" Makefile
          fi

          echo "Makefile patched successfully."

      - name: Apply Hooks Patches
        if: ${{ inputs.ksu_type == 'ksu-next' && inputs.hooks_type == 'manual' }}
        working-directory: kernel_source/aosp
        run: |
          # Позволяет использовать manual hooks для ядра.

          cp ../../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./
          patch -p1 --forward -F 3 < scope_min_manual_hooks_v1.4.patch

      - name: Add Configuration Settings
        if: ${{ inputs.ksu_type != 'suki-su' }}
        working-directory: kernel_source/aosp
        run: |
          DEFCONFIG_PATH="../private/devices/google/${{ inputs.device }}/${{ inputs.device }}_defconfig"

          # Добавляем конфиги в defconfig устройства.
          echo "Adding configuration settings to defconfig..."
                    
          # KernelSU Core Configuration
          echo "CONFIG_KSU=y" >> "${DEFCONFIG_PATH}"

          if [ "${{ inputs.hooks_type }}" == "kprobes" ]; then
            if [ "${{ inputs.ksu_type }}" == "ksu-next" ]; then
              echo "CONFIG_KSU_KPROBES_HOOK=y" >> "${DEFCONFIG_PATH}"
            elif [ "${{ inputs.ksu_type }}" == "suki-su" ]; then
              echo "# CONFIG_KSU_MANUAL_HOOK is not set" >> "${DEFCONFIG_PATH}"
              echo "CONFIG_KPM=y" >> "${DEFCONFIG_PATH}"
            fi
            echo "CONFIG_KPROBES=y" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_HAVE_KPROBES=y" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_KPROBE_EVENTS=y" >> "${DEFCONFIG_PATH}"
          elif [ "${{ inputs.hooks_type }}" == "manual" ]; then
            echo "# CONFIG_KSU_KPROBES_HOOK is not set" >> "${DEFCONFIG_PATH}"
          fi

          # Mountify Support
          if [ "${{ inputs.ksu_type }}" == "ksu" ]; then
            echo "CONFIG_OVERLAY_FS=y" >> "${DEFCONFIG_PATH}"
          fi
          echo "CONFIG_TMPFS_XATTR=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "${DEFCONFIG_PATH}"

          # Networking Configuration
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "${DEFCONFIG_PATH}"

          # BBR TCP Congestion Control
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_TCP_CONG_BBR=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_NET_SCH_FQ=y" >> "${DEFCONFIG_PATH}"
          echo "# CONFIG_TCP_CONG_BIC is not set" >> "${DEFCONFIG_PATH}"
          echo "# CONFIG_TCP_CONG_WESTWOOD is not set" >> "${DEFCONFIG_PATH}"
          echo "# CONFIG_TCP_CONG_HTCP is not set" >> "${DEFCONFIG_PATH}"

          # IPSet support
          echo "CONFIG_IP_SET=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_MAX=256" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_BITMAP_IP=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_BITMAP_IPMAC=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_BITMAP_PORT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_HASH_IP=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_HASH_IPPORT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_HASH_IPPORTIP=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_HASH_IPPORTNET=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_HASH_NET=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_HASH_NETNET=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_HASH_NETPORT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_IP_SET_HASH_NETIFACE=y" >> "${DEFCONFIG_PATH}"

          if [ "${{ inputs.susfs }}" = "true" ]; then
            # SUSFS Configuration
            echo "CONFIG_KSU_SUSFS=y" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "${DEFCONFIG_PATH}"
            
            # SUSFS Auto Mount Features
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "${DEFCONFIG_PATH}"
            
            # SUSFS Advanced Features
            echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "${DEFCONFIG_PATH}"
            # echo "# CONFIG_KSU_SUSFS_SUS_OVERLAYFS is not set" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "${DEFCONFIG_PATH}"
            
            # SUSFS Debugging and Security
            echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "${DEFCONFIG_PATH}"
            echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "${DEFCONFIG_PATH}"
            echo "# CONFIG_KSU_SUSFS_SUS_SU is not set" >> "${DEFCONFIG_PATH}"
          fi

          echo "Showing updated defconfig:"
          cat "${DEFCONFIG_PATH}"

          # Удаление проверки defconfig
          sed -i 's/check_defconfig//' ./build.config.gki

      - name: Pre-compute Flags and Patch Kernel Source
        working-directory: kernel_source/aosp
        run: |
          set -e
          KSU_MAKEFILE="./KernelSU/kernel/Makefile"
          SRC_TREE="." # В контексте этого шага, корень исходников - текущая директория

          if [ "$(sha256sum "$KSU_MAKEFILE")" != "63568996ecc9189b24ee5ed5e85c9bf52e88bea9f7fa9e30494a1f7d947e0c84  Makefile" ]; then
            sha256sum "$KSU_MAKEFILE"
            echo "Makefile был изменён, дальнейшие действия могут быть некорректны."
          else 
            echo "Makefile в ожидаемом состоянии, продолжаем."
          fi
          
          echo "INFO: Analyzing kernel source for compatibility flags and required patches..."
          FLAG_LIST=()

          # --- БЛОК 1: ОПРЕДЕЛЕНИЕ ФЛАГОВ КОМПИЛЯЦИИ ---
          # Этот блок воспроизводит все `grep` проверки, результат которых - добавление `ccflags-y`
          
          if grep -q "current_sid(void)" "$SRC_TREE/security/selinux/include/objsec.h"; then FLAG_LIST+=("-DKSU_COMPAT_HAS_CURRENT_SID"); fi
          if grep -q "struct selinux_state " "$SRC_TREE/security/selinux/include/security.h"; then FLAG_LIST+=("-DKSU_COMPAT_HAS_SELINUX_STATE"); fi
          if grep -q "ssize_t kernel_read" "$SRC_TREE/fs/read_write.c"; then FLAG_LIST+=("-DKSU_OPTIONAL_KERNEL_READ"); fi
          if grep "ssize_t kernel_write" "$SRC_TREE/fs/read_write.c" | grep -q "const void"; then FLAG_LIST+=("-DKSU_OPTIONAL_KERNEL_WRITE"); fi
          if grep -q "inode_security_struct\s\+\*selinux_inode" "$SRC_TREE/security/selinux/include/objsec.h"; then FLAG_LIST+=("-DKSU_OPTIONAL_SELINUX_INODE"); fi
          if grep -q "CONFIG_KDP_CRED" "$SRC_TREE/kernel/cred.c"; then FLAG_LIST+=("-DSAMSUNG_UH_DRIVER_EXIST"); fi
          if grep -q "SEC_SELINUX_PORTING_COMMON" "$SRC_TREE/security/selinux/avc.c"; then FLAG_LIST+=("-DSAMSUNG_SELINUX_PORTING"); fi
          if grep -A1 "^int vfs_getattr" "$SRC_TREE/fs/stat.c" | grep -q "query_flags"; then FLAG_LIST+=("-DKSU_HAS_NEW_VFS_GETATTR"); fi
          if grep -q "struct proc_ops " "$SRC_TREE/include/linux/proc_fs.h"; then FLAG_LIST+=("-DKSU_COMPAT_HAS_PROC_OPS"); fi

          # --- БЛОК 2: ПРОВЕРКА И ПАТЧ ИСХОДНОГО КОДА ЯДРА ---
          # Этот блок воспроизводит логику модификации fs/internal.h из Makefile
          
          if grep -q "int\s\+path_umount" "$SRC_TREE/fs/namespace.c"; then
            echo "INFO: Found path_umount in fs/namespace.c. Adding compile flag."
            FLAG_LIST+=("-DKSU_HAS_PATH_UMOUNT")
            
            INTERNAL_H_PATH="$SRC_TREE/fs/internal.h"
            # Проверяем, что прототип еще не добавлен
            if ! grep -Eq "^int path_umount" "$INTERNAL_H_PATH"; then
              echo "WARN: Prototype for path_umount not found in $INTERNAL_H_PATH. Patching file..."
              # Выполняем `sed` для добавления прототипа в нужное место
              sed -i '/^extern void __init mnt_init/a int path_umount(struct path *path, int flags);' "$INTERNAL_H_PATH"
              echo "INFO: Successfully patched $INTERNAL_H_PATH."
            else
              echo "INFO: Prototype for path_umount already exists in $INTERNAL_H_PATH. No patch needed."
            fi
          fi

          # --- БЛОК 3: ВНЕДРЕНИЕ РЕЗУЛЬТАТОВ В MAKEFILE ---
          echo "INFO: Injecting computed flags into $KSU_MAKEFILE"
          for flag in "${FLAG_LIST[@]}"; do
            echo "ccflags-y += $flag" >> "$KSU_MAKEFILE"
            echo "  Added: $flag"
            echo "CAT"
            cat "$KSU_MAKEFILE"
          done

      - name: Add Configuration Settings SukiSU
        if: ${{ inputs.ksu_type == 'suki-su' }}
        working-directory: kernel_source/aosp
        run: |
          DEFCONFIG_PATH="../private/devices/google/${{ inputs.device }}/${{ inputs.device }}_defconfig"

          # Добавляем конфиги в defconfig устройства.
          echo "Adding configuration settings to defconfig..."

          echo "Integration KernelSU"
          # KernelSU Core Configuration
          echo "CONFIG_KSU=y" >> "${DEFCONFIG_PATH}"
          echo "# CONFIG_KSU_DEBUG is not set" >> "${DEFCONFIG_PATH}"
          echo "# CONFIG_KSU_MULTI_MANAGER_SUPPORT is not set" >> "${DEFCONFIG_PATH}"   
          echo "CONFIG_KSU_THRONE_TRACKER_LEGACY=y" >> "${DEFCONFIG_PATH}"       

          # KProbes
          echo "CONFIG_KSU_KPROBES_HOOK=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KPROBES=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_HAVE_KPROBES=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KPROBE_EVENTS=y" >> "${DEFCONFIG_PATH}"

          # Enable KPM
          echo "CONFIG_KPM=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KALLSYMS=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KALLSYMS_ALL=y" >> "${DEFCONFIG_PATH}"

          echo "Integration SUSFS"
          # SUSFS Core Configuration and Options
          echo "CONFIG_KSU_SUSFS=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "${DEFCONFIG_PATH}"
          echo "# CONFIG_KSU_SUSFS_SUS_SU is not set" >> "${DEFCONFIG_PATH}"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "${DEFCONFIG_PATH}"

          echo "Showing updated defconfig:"
          cat "${DEFCONFIG_PATH}"

          # Удаление проверки defconfig
          sed -i 's/check_defconfig//' ./build.config.gki

      - name: Change Kernel Name
        working-directory: kernel_source
        run: |
          set -e
          # Удаляем надпись dirty из наименования ядра.
          sed -i "s/echo -n -dirty/echo -n \"\"/g" build/kernel/kleaf/workspace_status_stamp.py

          TIMESTAMP=$(date -u +'\"%a %b %d %T %Z %Y\"')
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

          # Добавляем свою метку в название ядра. 
          # sed -i "\$s|echo \"\$res\"|echo \"\$res-NEXT-v${KSUVER}-SUSFS-v1.5.9\"|" ./aosp/scripts/setlocalversion
          sed -i "s/build-timestamp = \$(or \$(KBUILD_BUILD_TIMESTAMP), \$(build-timestamp-auto))/build-timestamp = ${TIMESTAMP}/" ./aosp/init/Makefile

      - name: Build Kernel
        working-directory: kernel_source
        run: |
          ./build_${{ inputs.device }}.sh --kernel_package=@//aosp

      - name: Patch Kernel Image with KPM
        if: ${{ inputs.ksu_type == 'suki-su' }}
        run: |
          set -ex
          DIST_DIR="${GITHUB_WORKSPACE}/kernel_source/out/${{ inputs.device }}/dist"
          KPTOOL="${GITHUB_WORKSPACE}/Prebuilds/kptools-linux"
          KPIMG="${GITHUB_WORKSPACE}/Prebuilds/kpimg"
          chmod +x ${KPTOOL}
          chmod +x ${KPIMG}
          # Patch existing uncompressed Image and recompress
          "$KPTOOL" -p -i "$DIST_DIR/Image" -k "$KPIMG" -s "SukiSU" -o "$DIST_DIR/Image.kpm_tmp"
          lz4 -z -f "$DIST_DIR/Image.kpm_tmp" "$DIST_DIR/Image.lz4"
          echo "Kernel image patched with KPM successfully."

      - name: Prepare Artifacts for Packaging
        run: |
          # Директории для артефактов
          ARTIFACT_DIR="kernel_source/out/${{ inputs.device }}/dist"
          ANYKERNEL_DIR="AnyKernel3"
          MKBOOTIMG_DIR="FilesForImg"

          echo "Preparing artifacts from $ARTIFACT_DIR"
        
          # Создаем обе целевые директории
          mkdir -p "$ANYKERNEL_DIR"
          
          # Подготовка для AnyKernel3
          cp "$ARTIFACT_DIR/Image.lz4" "$ANYKERNEL_DIR/Image.lz4"
          cat "$ARTIFACT_DIR"/*.dtb > "$ANYKERNEL_DIR/dtb"
        
          # Подготовка для создания .img файлов
          cp "$ARTIFACT_DIR/Image.lz4" "$MKBOOTIMG_DIR/assets"
          cat "$ARTIFACT_DIR"/*.dtb > "$MKBOOTIMG_DIR/assets/dtb"

          echo "Artifacts prepared successfully."
          ls -l "$ANYKERNEL_DIR"
          ls -l "$MKBOOTIMG_DIR"

      - name: Create ZIP Files for Different Formats
        working-directory: AnyKernel3
        run: |
          SUSFS_STAT="${{ inputs.susfs && '_SUSFS-v1.5.9' || '' }}"
          echo "SUSFS_STAT=$SUSFS_STAT" >> $GITHUB_ENV

          ZIP_NAME="AK3_${KERNEL_VER}_${{ inputs.device }}_${{ inputs.ksu_type }}-v${KSUVER}${SUSFS_STAT}_${{ inputs.hooks_type }}.zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*

          # export ZIP_NAME for later steps
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: Build boot.img and vendor_kernel_boot.img
        working-directory: FilesForImg
        run: |
          set -ex

          ASSETS_DIR="assets"
          OUTPUT_DIR="output"
          TMP_DIR="tmp_build"

          # Используем MAGISKBOOT из env
          BASE_DIR="$PWD"

          # Подготовка
          echo "Preparing workspace..."
          mkdir -p "$OUTPUT_DIR" "$TMP_DIR"

          # Формируем имена файлов для экспорта
          BOOT_NAME="boot_${KERNEL_VER}_${{ inputs.device }}_${{ inputs.ksu_type }}-v${KSUVER}${SUSFS_STAT}_${{ inputs.hooks_type }}.img"
          VENDOR_NAME="vendor_kernel_boot_${KERNEL_VER}_${{ inputs.device }}_${{ inputs.ksu_type }}-v${KSUVER}${SUSFS_STAT}_${{ inputs.hooks_type }}.img"
          echo "BOOT_NAME=$BOOT_NAME" >> $GITHUB_ENV
          echo "VENDOR_NAME=$VENDOR_NAME" >> $GITHUB_ENV

          # Пересборка boot.img
          echo "==> Repacking boot.img..."

          cd "$TMP_DIR"

          "$MAGISKBOOT" unpack "$BASE_DIR/$ASSETS_DIR/boot.img"
          cp "$BASE_DIR/$ASSETS_DIR/Image.lz4" kernel
          "$MAGISKBOOT" repack "$BASE_DIR/$ASSETS_DIR/boot.img" "$BASE_DIR/$OUTPUT_DIR/$BOOT_NAME"
          echo "$BOOT_NAME created."

          # Возвращаемся в основную директорию проекта
          cd "$BASE_DIR"

          # Пересборка vendor_kernel_boot.img
          echo "Repacking vendor_kernel_boot.img..."

          # Снова переходим во временную директорию очистив ее от файлов boot.img
          rm -rf $TMP_DIR/*
          cd "$TMP_DIR"

          "$MAGISKBOOT" unpack "$BASE_DIR/$ASSETS_DIR/vendor_kernel_boot.img"
          cp "$BASE_DIR/$ASSETS_DIR/dtb" dtb
          "$MAGISKBOOT" repack "$BASE_DIR/$ASSETS_DIR/vendor_kernel_boot.img" "$BASE_DIR/$OUTPUT_DIR/$VENDOR_NAME"
          echo "$VENDOR_NAME created."

          # Возвращаемся в основную директорию проекта
          cd "$BASE_DIR"

          echo "==> Cleaning up..."
          rm -rf "$TMP_DIR"

          cp ${OUTPUT_DIR}/*.img -d ../

          echo "Build finished successfully."

      - name: Compress Image Files with Gzip
        run: |
          echo "Compressing .img files..."
          gzip -9 boot_*.img
          gzip -9 vendor_kernel_boot_*.img
          
          echo "Compression complete. Listing final files:"
          ls -lh *.zip *.gz

      - name: Upload AnyKernel ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: AK3*.zip

      - name: Upload boot.img Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BOOT_NAME }}
          path: boot_*.img.gz

      - name: Upload vendor_kernel_boot.img Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.VENDOR_NAME }}
          path: vendor_kernel_boot_*.img.gz

      - name: Start VS Code if fail build
        if: failure()
        uses: fawazahmed0/action-debug-vscode@main